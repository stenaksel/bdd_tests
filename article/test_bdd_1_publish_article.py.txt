# content of test_publish_article.py

# from pytest_bdd import given, when, then, scenario  # isort:skip
from pytest_bdd import scenario  # isort:skip

from .step_defs.steps import *


@scenario('features/publish_article.feature', 'Publishing the article')
# @scenarios('features/publish_article.feature')
def test_publish():
    print('\n==>==>test_publish()\n')


# def create_test_article(author='the author'):
#     return author


# @given("I'm an author user")
# def author_user(author, author):
#     author['user'] = author.user


# @given('I have an article', target_fixture='farticle')
# def article(author):
#     return create_test_article(author=author)


# @when('I go to the article page')
# def go_to_article(farticle, browser):
#     # browser.visit(urljoin(browser.url, '/manage/articles/{0}/'.format(article.id)))
#     print(f'farticle: {farticle}')
#     print(f'browser.url: {browser.url}')


# @when('I press the publish button')
# def publish_article(browser):
#     browser.find_by_css('button[name=publish]').first.click()


# @then('I should not see the error message')
# def no_error_message(browser):
#     # with pytest.raises(ElementDoesNotExist):
#     #     browser.find_by_css('.message.error').first

#     print(f'browser.url: {browser.url}')


# @then('the article should be published')
# def article_is_published(farticle):
#     farticle.refresh()  # Refresh the object in the SQLAlchemy session
#     assert farticle.is_published
